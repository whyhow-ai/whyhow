{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the WhyHow Automated Knowledge Graph Creation SDK Documentation","text":"<p>The WhyHow Knowledge Graph Creation SDK enables you to quickly and easily build automated knowledge graphs tailored to your unique worldview. Instantly build, extend, and query well-scoped KGs using a raw PDF and simple seed concepts in natural language.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Instantaneously knowledge graphs using your documents and seed concepts (currently supports PDF files)</li> <li>Simple API for querying your knowledge graphs using natural language</li> <li>Bring your own keys for OpenAI, Pinecone, and Neo4j</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install the package by following the Installation Guide</li> <li>Set up your OpenAI, Pinecone, and Neo4j credential as environment variables</li> <li>Initialize the SDK with your WhyHow API key</li> <li>Create a namespace and add raw documents using <code>graph.add_documents()</code></li> <li>Create a graph for the namespace using <code>graph.create_graph()</code> using a list of seed concepts</li> <li>Query the graph with natural language using <code>graph.query_graph()</code></li> </ol> <p>For a detailed walkthrough and code examples, check out the Tutorial.</p>"},{"location":"api/","title":"Reference","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>OpenAI API key</li> <li>Pinecone API key</li> <li>Neo4j credentials (username, password, and URL)</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>You can install the SDK directly from PyPI using pip:</p> <pre><code>pip install whyhow\n\nexport OPENAI_API_KEY=&lt;your openai api key&gt;\nexport PINECONE_API_KEY=&lt;your pinecone api key&gt;\nexport NEO4J_URL=&lt;your neo4j url&gt;\nexport NEO4J_USERNAME=&lt;your neo4j username&gt;\nexport NEO4J_PASSWORD=&lt;your neo4j password&gt;\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from Github","text":"<p>Alternatively, you can clone the repo and install the package</p> <pre><code>git clone git@github.com:whyhow-ai/whyhow.git\ncd whyhow\npip install .\n\nexport OPENAI_API_KEY=&lt;your openai api key&gt;\nexport PINECONE_API_KEY=&lt;your pinecone api key&gt;\nexport NEO4J_URL=&lt;your neo4j url&gt;\nexport NEO4J_USERNAME=&lt;your neo4j username&gt;\nexport NEO4J_PASSWORD=&lt;your neo4j password&gt;\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation, please check the following:</p> <ul> <li>Ensure that you have Python 3.10 or higher installed. You can check your Python version by running <code>python --version</code> in your terminal.</li> <li>Make sure that you have correctly set the <code>OPENAI_API_KEY</code>, <code>PINECONE_API_KEY</code>, <code>NEO4J_URL</code>, <code>NEO4J_USERNAME</code>, <code>NEO4J_PASSWORD</code> environment variables with your respective credentials.</li> <li>If you are installing from GitHub, ensure that you have cloned the repository correctly and are in the right directory.</li> <li>If you are using a virtual environment, make sure that it is activated before running the installation commands.</li> <li>If you still face problems, please open an issue on the GitHub repository with detailed information about the error and your environment setup.</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is a straightforward tutorial on how ot build and query a knowledge graph using PDF texts of Harry Potter books using WhyHow SDK. This example will guide you through importing documents from the Harry Potter series into the knowledge graph, then querying it for insights related to the series.</p>"},{"location":"tutorial/#environment-setup","title":"Environment Setup","text":"<p>Ensure you have the following:</p> <ul> <li>Python 3.10 or higher</li> <li>OpenAI API key</li> <li>Pinecone API key</li> <li>Neo4j credentials (username, password, and URL)</li> </ul> <p>To keep your API keys and credentials secure, set them as environment variables. Open your terminal and run the following commands, substituting the placeholders with your actual data:</p> <pre><code>export WHYHOW_API_KEY=&lt;YOUR_WHYHOW_API_KEY&gt;\nexport PINECONE_API_KEY=&lt;YOUR_PINECONE_API_KEY&gt;\nexport OPENAI_API_KEY=&lt;YOUR_OPENAI_API_KEY&gt;\nexport NEO4J_USER=&lt;YOUR_NEO4J_USERNAME&gt;\nexport NEO4J_PASSWORD=&lt;YOUR_NEO4J_PASSWORD&gt;\nexport NEO4J_URL=&lt;YOUR_NEO4J_DATABASE_URL&gt;\n</code></pre>"},{"location":"tutorial/#install-whyhow-sdk","title":"Install WhyHow SDK","text":"<p>If you haven't already, install the <code>WhyHow SDK</code>using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"tutorial/#configure-the-whyhow-client","title":"Configure the WhyHow Client","text":"<p>With your environment variables set, you can now configure the <code>WhyHow</code> client in your Python script. The client will automatically read in your environment variables, or you can override those values by specifying them in the client config.</p> <pre><code>import os\nfrom whyhow import WhyHow\n\nclient = WhyHow(api_key=&lt;your WhyHow api key&gt;)\n</code></pre>"},{"location":"tutorial/#creating-the-knowledge-graph","title":"Creating the Knowledge Graph","text":"<p>Define the namespace for your project and specify the paths to your Harry Potter series documents. Your namespace is a logical grouping of the raw data you upload, the seed concepts you define, and the graphs you create. Namespaces are meant to be tightly scoped to your use case. You can create as many namespaces as you want.</p> <pre><code>namespace = \"harry-potter\"\ndocuments = [\n    \"path/to/harry_potter_and_the_philosophers_stone.pdf\",\n    \"path/to/harry_potter_and_the_chamber_of_secrets.pdf\"\n    # Add paths to the rest of the Harry Potter series documents\n]\n\n# Add documents to your namespace\ndocuments_response = client.graph.add_documents(namespace, documents)\nprint(\"Documents Added:\", documents_response)\n</code></pre> <p>Create the knowledge graph from the uploaded documents:</p> <pre><code>questions = [\"What does Harry look like?\",\"What does Hermione look like?\",\"What does Ron look like?\"]\nextracted_graph = client.graph.create_graph(namespace, questions)\nprint(\"Extracted Graph:\", extracted_graph)\n</code></pre>"},{"location":"tutorial/#querying-the-knowledge-graph","title":"Querying the Knowledge Graph","text":"<p>With the graph created, you can now query it to find specific information. For example, to find out who wears a cloak:</p> <pre><code>query = \"Who wears a Cloak?\"\nquery_response = client.graph.query_graph(namespace, query)\nprint(\"Query Response:\", query_response)\n</code></pre> <p>This query returns information based on the interactions and mentions of cloaks in the Harry Potter series. Even if you did not explicitly ask the SDK to extract information on cloaks and clothing, we are still able to uncover relevant information like this, illustrating the power of our AI-enabled knowledge graphs creation experience.</p>"}]}