{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the WhyHow Automated Knowledge Graph Creation SDK Documentation","text":"<p>The WhyHow Knowledge Graph Creation SDK enables you to quickly and easily build automated knowledge graphs tailored to your unique worldview. Instantly build, extend, and query well-scoped KGs using a raw PDF and simple seed concepts in natural language.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Instantaneously knowledge graphs using your documents and seed concepts (currently supports PDF files)</li> <li>Simple API for querying your knowledge graphs using natural language</li> <li>Bring your own keys for OpenAI, Pinecone, and Neo4j</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install the package by following the Installation Guide</li> <li>Set up your OpenAI, Pinecone, and Neo4j credential as environment variables</li> <li>Initialize the SDK with your WhyHow API key</li> <li>Create a namespace and add raw documents using <code>graph.add_documents()</code></li> <li>Create a graph for the namespace using <code>graph.create_graph()</code> using a list of seed concepts</li> <li>Query the graph with natural language using <code>graph.query_graph()</code></li> </ol> <p>For a detailed walkthrough and code examples, check out the Tutorial.</p>"},{"location":"api/","title":"API Documentation","text":"<p>Here's the generated <code>api.md</code> file for your mkdocs based on the provided code files:</p> <pre><code># API Reference\n\nThis document provides a reference for the WhyHow API, which allows you to interact with the graph functionality.\n\n## GraphAPI\n\nThe `GraphAPI` class provides methods to interact with the graph API synchronously.\n\n### `add_documents`\n\n```python\ndef add_documents(self, namespace: str, documents: list[str]) -&gt; str\n</code></pre> <p>Add documents to the graph.</p>"},{"location":"api/#parameters","title":"Parameters","text":"<ul> <li><code>namespace</code> (str): The namespace of the graph.</li> <li><code>documents</code> (list[str]): The documents to add.</li> </ul>"},{"location":"api/#returns","title":"Returns","text":"<ul> <li>(str): The response message.</li> </ul>"},{"location":"api/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If no documents are provided, not all documents exist, only PDFs are supported, PDFs are too large (limit: 8MB), or too many documents are provided (limit: 3 files during the beta).</li> </ul>"},{"location":"api/#create_graph","title":"<code>create_graph</code>","text":"<pre><code>def create_graph(self, namespace: str, questions: list[str]) -&gt; str\n</code></pre> <p>Create a new graph.</p>"},{"location":"api/#parameters_1","title":"Parameters","text":"<ul> <li><code>namespace</code> (str): The namespace of the graph to create.</li> <li><code>questions</code> (list[str]): The seed concepts to initialize the graph with.</li> </ul>"},{"location":"api/#returns_1","title":"Returns","text":"<ul> <li>(str): The response message.</li> </ul>"},{"location":"api/#raises_1","title":"Raises","text":"<ul> <li><code>ValueError</code>: If no questions are provided.</li> </ul>"},{"location":"api/#create_graph_from_schema","title":"<code>create_graph_from_schema</code>","text":"<pre><code>def create_graph_from_schema(self, namespace: str, schema_file: str) -&gt; str\n</code></pre> <p>Create a new graph based on a user-defined schema.</p>"},{"location":"api/#parameters_2","title":"Parameters","text":"<ul> <li><code>namespace</code> (str): The namespace of the graph to create.</li> <li><code>schema_file</code> (str): The schema file to use to build the graph.</li> </ul>"},{"location":"api/#returns_2","title":"Returns","text":"<ul> <li>(str): The response message.</li> </ul>"},{"location":"api/#raises_2","title":"Raises","text":"<ul> <li><code>ValueError</code>: If no schema is provided.</li> </ul>"},{"location":"api/#query_graph","title":"<code>query_graph</code>","text":"<pre><code>def query_graph(self, namespace: str, query: str, include_triples: bool = False, include_chunks: bool = False) -&gt; QueryGraphReturn\n</code></pre> <p>Query the graph.</p>"},{"location":"api/#parameters_3","title":"Parameters","text":"<ul> <li><code>namespace</code> (str): The namespace of the graph.</li> <li><code>query</code> (str): The query to run.</li> <li><code>include_triples</code> (bool): Include the triples used in the return.</li> <li><code>include_chunks</code> (bool): Include the chunk ids and chunk text in the return.</li> </ul>"},{"location":"api/#returns_3","title":"Returns","text":"<ul> <li>(<code>QueryGraphReturn</code>): The answer, triples (optional), and chunks (optional).</li> </ul>"},{"location":"api/#schemas","title":"Schemas","text":"<p>The WhyHow API uses Pydantic models to define the request and response schemas.</p>"},{"location":"api/#adddocumentsresponse","title":"<code>AddDocumentsResponse</code>","text":"<pre><code>class AddDocumentsResponse(BaseResponse):\n    \"\"\"Schema for the response body of the add documents endpoint.\"\"\"\n\n    namespace: str\n    message: str\n</code></pre>"},{"location":"api/#createquestiongraphrequest","title":"<code>CreateQuestionGraphRequest</code>","text":"<pre><code>class CreateQuestionGraphRequest(BaseRequest):\n    \"\"\"Schema for the request body of the create graph endpoint.\"\"\"\n\n    questions: list[str]\n</code></pre>"},{"location":"api/#createschemagraphrequest","title":"<code>CreateSchemaGraphRequest</code>","text":"<pre><code>class CreateSchemaGraphRequest(BaseRequest):\n    \"\"\"Schema for the request body of the create graph endpoint.\"\"\"\n\n    graph_schema: SchemaModel\n</code></pre>"},{"location":"api/#creategraphresponse","title":"<code>CreateGraphResponse</code>","text":"<pre><code>class CreateGraphResponse(BaseResponse):\n    \"\"\"Schema for the response body of the create graph endpoint.\"\"\"\n\n    namespace: str\n    message: str\n</code></pre>"},{"location":"api/#querygraphrequest","title":"<code>QueryGraphRequest</code>","text":"<pre><code>class QueryGraphRequest(BaseRequest):\n    \"\"\"Schema for the request body of the query graph endpoint.\"\"\"\n\n    query: str\n</code></pre>"},{"location":"api/#querygraphresponse","title":"<code>QueryGraphResponse</code>","text":"<pre><code>class QueryGraphResponse(BaseResponse):\n    \"\"\"Schema for the response body of the query graph endpoint.\"\"\"\n\n    namespace: str\n    answer: str\n    include_triples: bool = False\n    include_chunks: bool = False\n</code></pre>"},{"location":"api/#querygraphreturn","title":"<code>QueryGraphReturn</code>","text":"<pre><code>class QueryGraphReturn(BaseReturn):\n    \"\"\"Schema for the return value of the query graph endpoint.\"\"\"\n\n    answer: str\n</code></pre>"},{"location":"api/#base-classes","title":"Base Classes","text":"<p>The WhyHow API uses the following base classes for the API schemas:</p>"},{"location":"api/#apibase","title":"<code>APIBase</code>","text":"<pre><code>class APIBase(BaseModel, ABC):\n    \"\"\"Base class for API schemas.\"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    client: Client\n    prefix: str = \"\"\n</code></pre>"},{"location":"api/#asyncapibase","title":"<code>AsyncAPIBase</code>","text":"<p><pre><code>class AsyncAPIBase(BaseModel, ABC):\n    \"\"\"Base class for async API schemas.\"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    client: AsyncClient\n    prefix: str = \"\"\n</code></pre> ```</p> <p>This <code>api.md</code> file provides an overview of the <code>GraphAPI</code> class and its methods, along with the request and response schemas used by the API. It also includes information about the base classes used for the API schemas.</p> <p>You can include this file in your mkdocs documentation to provide a reference for the WhyHow API.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>OpenAI API key</li> <li>Pinecone API key</li> <li>Neo4j credentials (username, password, and URL)</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>You can install the SDK directly from PyPI using pip:</p> <pre><code>pip install whyhow\n\nexport OPENAI_API_KEY=&lt;your openai api key&gt;\nexport PINECONE_API_KEY=&lt;your pinecone api key&gt;\nexport NEO4J_URL=&lt;your neo4j url&gt;\nexport NEO4J_USERNAME=&lt;your neo4j username&gt;\nexport NEO4J_PASSWORD=&lt;your neo4j password&gt;\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from Github","text":"<p>Alternatively, you can clone the repo and install the package</p> <pre><code>git clone git@github.com:whyhow-ai/whyhow.git\ncd whyhow\npip install .\n\nexport OPENAI_API_KEY=&lt;your openai api key&gt;\nexport PINECONE_API_KEY=&lt;your pinecone api key&gt;\nexport NEO4J_URL=&lt;your neo4j url&gt;\nexport NEO4J_USERNAME=&lt;your neo4j username&gt;\nexport NEO4J_PASSWORD=&lt;your neo4j password&gt;\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation, please check the following:</p> <ul> <li>Ensure that you have Python 3.10 or higher installed. You can check your Python version by running <code>python --version</code> in your terminal.</li> <li>Make sure that you have correctly set the <code>OPENAI_API_KEY</code>, <code>PINECONE_API_KEY</code>, <code>NEO4J_URL</code>, <code>NEO4J_USERNAME</code>, <code>NEO4J_PASSWORD</code> environment variables with your respective credentials.</li> <li>If you are installing from GitHub, ensure that you have cloned the repository correctly and are in the right directory.</li> <li>If you are using a virtual environment, make sure that it is activated before running the installation commands.</li> <li>If you still face problems, please open an issue on the GitHub repository with detailed information about the error and your environment setup.</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is a straightforward tutorial on how to build and query a knowledge graph using PDF texts of Harry Potter books using WhyHow SDK. This example will guide you through importing documents from the Harry Potter series into the knowledge graph, then querying it for insights related to the series.</p>"},{"location":"tutorial/#environment-setup","title":"Environment Setup","text":"<p>Ensure you have the following:</p> <ul> <li>Python 3.10 or higher</li> <li>OpenAI API key</li> <li>Pinecone API key</li> <li>Neo4j credentials (username, password, and URL)</li> </ul> <p>To keep your API keys and credentials secure, set them as environment variables. Open your terminal and run the following commands, substituting the placeholders with your actual data:</p> <pre><code>export WHYHOW_API_KEY=&lt;YOUR_WHYHOW_API_KEY&gt;\nexport PINECONE_API_KEY=&lt;YOUR_PINECONE_API_KEY&gt;\nexport OPENAI_API_KEY=&lt;YOUR_OPENAI_API_KEY&gt;\nexport NEO4J_USER=&lt;YOUR_NEO4J_USERNAME&gt;\nexport NEO4J_PASSWORD=&lt;YOUR_NEO4J_PASSWORD&gt;\nexport NEO4J_URL=&lt;YOUR_NEO4J_DATABASE_URL&gt;\n</code></pre>"},{"location":"tutorial/#install-whyhow-sdk","title":"Install WhyHow SDK","text":"<p>If you haven't already, install the <code>WhyHow SDK</code> using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"tutorial/#configure-the-whyhow-client","title":"Configure the WhyHow Client","text":"<p>With your environment variables set, you can now configure the <code>WhyHow</code> client in your Python script. The client will automatically read in your environment variables, or you can override those values by specifying them in the client config.</p> <pre><code>import os\nfrom whyhow import WhyHow\n\nclient = WhyHow(api_key=&lt;your WhyHow API key&gt;)\n</code></pre>"},{"location":"tutorial/#option-1-create-the-knowledge-graph-from-a-schema","title":"Option 1 - Create the Knowledge Graph from a schema","text":"<p>First, you need to define the namespace for your project and specify the paths to your Harry Potter book documents. Your namespace is a logical grouping of the raw data you upload, the schema you define, and the graphs you create. Namespaces are meant to be tightly scoped to your use case. You can create as many namespaces as you want.</p> <pre><code>namespace = \"harry-potter\"\ndocuments = [\n    \"path/to/harry_potter_and_the_philosophers_stone.pdf\",\n    \"path/to/harry_potter_and_the_chamber_of_secrets.pdf\"\n    # Add paths to the rest of the Harry Potter series documents\n]\n\n# Add documents to your namespace\ndocuments_response = client.graph.add_documents(namespace, documents)\nprint(\"Documents Added:\", documents_response)\n</code></pre> <p>Next, you must create a schema which defines the entities, relationships, and patterns you'd like to use to construct the graph. Create this and save it as a JSON file.</p> <pre><code>#schema.json\n\n{\n  \"entities\": [\n    {\n      \"name\": \"character\",\n      \"description\": \"A person appearing in the book, e.g., Harry Potter, Ron Weasley, Hermione Granger, Albus Dumbledore.\"\n    },\n    {\n      \"name\": \"object\",\n      \"description\": \"Inanimate items that characters use or interact with, e.g., wand, Philosopher's Stone, Invisibility Cloak, broomstick.\"\n    }\n  ],\n  \"relations\": [\n    {\n      \"name\": \"friends with\",\n      \"description\": \"Denotes a friendly relationship between characters.\"\n    },\n    {\n      \"name\": \"interacts with\",\n      \"description\": \"Describes a scenario in which a character engages with another character, creature, or object.\"\n    },\n  ],\n  \"patterns\": [\n    {\n      \"head\": \"character\",\n      \"relation\": \"friends with\",\n      \"tail\": \"character\",\n      \"description\": \"One character is friends with another, e.g., Harry Potter is friends with Ron Weasley.\"\n    },\n    {\n      \"head\": \"character\",\n      \"relation\": \"interacts with\",\n      \"tail\": \"object\",\n      \"description\": \"A character interacting with an object, e.g., Harry Potter interacts with the Invisibility Cloak.\"\n    }\n  ]\n}\n</code></pre> <p>Then, create the graph using the schema and the uploaded documents:</p> <pre><code># Create graph from schema\n\nschema = \"./schema.json\"\ncreate_graph_with_schema_response = client.graph.create_graph_from_schema(namespace, schema)\nprint(create_graph_with_schema_response)\n# Creating your graph\n</code></pre>"},{"location":"tutorial/#option-2-create-the-knowledge-graph-from-seed-questions","title":"Option 2 - Create the Knowledge Graph from seed questions","text":"<p>Alternatively, you can create a graph using seed concepts in the form of questions written in natural language. We'll create a new namespace and upload the same data.</p> <pre><code>namespace = \"harry-potter-2\"\ndocuments = [\n    \"path/to/harry_potter_and_the_philosophers_stone.pdf\",\n    \"path/to/harry_potter_and_the_chamber_of_secrets.pdf\"\n    # Add paths to the rest of the Harry Potter series documents\n]\n\n# Add documents to your namespace\ndocuments_response = client.graph.add_documents(namespace, documents)\nprint(\"Documents Added:\", documents_response)\n</code></pre> <p>Create the knowledge graph from the seed questions and the uploaded documents:</p> <pre><code>questions = [\"What does Harry look like?\",\"What does Hermione look like?\",\"What does Ron look like?\"]\nextracted_graph = client.graph.create_graph(namespace, questions)\nprint(\"Extracted Graph:\", extracted_graph)\n</code></pre>"},{"location":"tutorial/#option-3-create-the-knowledge-graph-from-csv","title":"Option 3 - Create the Knowledge Graph from CSV","text":"<p>WhyHow also supports creating a graph from structured data in the form a CSV file. Note, right now we only support creating a graph from one CSV file per namespace. If you upload more than one file, the first will be overwritten.</p> <pre><code>namespace = \"specialists\"\ndocuments = [\"../examples/assets/specialists.csv\"]\nschema_file = \"../examples/assets/specialists.json\"\n\n# Automatically generate a schema\nschema = client.graph.generate_schema(documents=documents)\nprint(schema)\n\n# Add documents to your namespace\ndocuments_response = client.graph.add_documents(\n    namespace=namespace, documents=documents)\n</code></pre> <p>Use the <code>create_graph_from_csv</code> function to create a graph from the uploaded CSV file. The function will automatically use the schema provided to generate the graph</p> <pre><code>csv_graph = client.graph.create_graph_from_csv(\n    namespace=namespace, schema_file=schema_file\n)\n\nprint(csv_graph)\n</code></pre>"},{"location":"tutorial/#querying-the-knowledge-graph","title":"Querying the Knowledge Graph","text":"<p>With the graphs created, you can now query them to find specific information:</p> <pre><code># Query the graph created from csv using specific entities and relations\nquery = \"Who speaks English and live in Houston?\"\nentities = [\"English\",\"Houston\"]\nrelations = [\"SPEAKS\",\"LIVE_IN\"]\n\nspecific_query_response = client.graph.query_graph_specific(\n    namespace=namespace,\n    query=query,\n    entities=entities,\n    relations=relations,\n    include_triples=False,\n    include_chunks=False,\n)\n\nprint(\"Specific Query Response:\", specific_query_response)\n\n# Query graph created from schema\nquery = \"Who is Harry friends with?\"\nnamespace = \"harry-potter\"\nschema_query_response = client.graph.query_graph(namespace, query)\nprint(\"Query Response:\", query_response)\n\n# Query graph created from seed questions\nquery = \"Who wears a Cloak?\"\nnamespace = \"harry-potter-2\"\nseed_questions_query_response = client.graph.query_graph(namespace, query)\nprint(\"Query Response:\", query_response)\n\n# Include the triples in the return\nquery = \"Who is Harry friends with?\"\nnamespace = \"harry-potter\"\nschema_query_response = client.graph.query_graph(namespace, query, include_triples = True)\nprint(\"Query Response:\", query_response)\n\n# Include the chunk context in the return\nquery = \"Who is Harry friends with?\"\nnamespace = \"harry-potter\"\nschema_query_response = client.graph.query_graph(namespace, query, include_chunks = True)\nprint(\"Query Response:\", query_response)\n</code></pre>"}]}